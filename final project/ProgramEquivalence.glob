DIGEST 1b8f77afd61a75894d2d784f94e3037c
FProgramEquivalence
R333:345 Coq.Bool.Bool <> <> lib
R363:377 Coq.Arith.Arith <> <> lib
R395:409 Coq.Arith.EqNat <> <> lib
R427:441 Coq.omega.Omega <> <> lib
R459:472 Coq.Lists.List <> <> lib
R490:523 Coq.Logic.FunctionalExtensionality <> <> lib
R563:566 Maps <> <> lib
R584:586 Imp <> <> lib
def 710:715 <> aequiv
R726:729 Imp <> aexp ind
R755:759 Imp <> state def
R778:780 Coq.Init.Logic <> :type_scope:x_'='_x not
R767:771 Imp <> aeval def
R776:777 ProgramEquivalence <> a1 var
R773:774 ProgramEquivalence <> st var
R781:785 Imp <> aeval def
R790:791 ProgramEquivalence <> a2 var
R787:788 ProgramEquivalence <> st var
def 806:811 <> bequiv
R822:825 Imp <> bexp ind
R851:855 Imp <> state def
R874:876 Coq.Init.Logic <> :type_scope:x_'='_x not
R863:867 Imp <> beval def
R872:873 ProgramEquivalence <> b1 var
R869:870 ProgramEquivalence <> st var
R877:881 Imp <> beval def
R886:887 ProgramEquivalence <> b2 var
R883:884 ProgramEquivalence <> st var
def 1060:1065 <> cequiv
R1076:1078 Imp <> com ind
R1110:1114 Imp <> state def
R1122:1122 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R1137:1143 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R1158:1158 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R1125:1127 Imp <> ::x_'/'_x_'\\'_x not
R1130:1133 Imp <> ::x_'/'_x_'\\'_x not
R1123:1124 ProgramEquivalence <> c1 var
R1128:1129 ProgramEquivalence <> st var
R1134:1136 ProgramEquivalence <> st' var
R1146:1148 Imp <> ::x_'/'_x_'\\'_x not
R1151:1154 Imp <> ::x_'/'_x_'\\'_x not
R1144:1145 ProgramEquivalence <> c2 var
R1149:1150 ProgramEquivalence <> st var
R1155:1157 ProgramEquivalence <> st' var
prf 1279:1287 <> skip_left
R1302:1307 ProgramEquivalence <> cequiv def
R1332:1332 ProgramEquivalence <> c var
R1320:1322 Imp <> ::x_';;'_x not
R1316:1319 Imp <> ::'SKIP' not
R1323:1323 ProgramEquivalence <> c var
R1486:1490 Imp <> E_Seq constr
R1486:1490 Imp <> E_Seq constr
R1511:1516 Imp <> E_Skip constr
R1511:1516 Imp <> E_Skip constr
prf 1553:1562 <> skip_right
R1577:1582 ProgramEquivalence <> cequiv def
R1605:1605 ProgramEquivalence <> c var
R1591:1593 Imp <> ::x_';;'_x not
R1590:1590 ProgramEquivalence <> c var
R1594:1597 Imp <> ::'SKIP' not
R1752:1756 Imp <> E_Seq constr
R1752:1756 Imp <> E_Seq constr
R1790:1795 Imp <> E_Skip constr
R1790:1795 Imp <> E_Skip constr
prf 1940:1947 <> IFB_true
R1985:1994 Coq.Init.Logic <> :type_scope:x_'->'_x not
R1995:2000 ProgramEquivalence <> cequiv def
R2043:2044 ProgramEquivalence <> c1 var
R2010:2013 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2015:2020 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2023:2028 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2031:2033 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2014:2014 ProgramEquivalence <> b var
R2021:2022 ProgramEquivalence <> c1 var
R2029:2030 ProgramEquivalence <> c2 var
R1971:1976 ProgramEquivalence <> bequiv def
R1980:1984 Imp <> BTrue constr
R1978:1978 ProgramEquivalence <> b var
R2207:2212 ProgramEquivalence <> bequiv def
R2301:2308 Imp <> E_IfTrue constr
R2301:2308 Imp <> E_IfTrue constr
R2338:2343 ProgramEquivalence <> bequiv def
prf 2410:2418 <> IFB_false
R2454:2460 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2461:2466 ProgramEquivalence <> cequiv def
R2503:2504 ProgramEquivalence <> c2 var
R2473:2476 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2478:2483 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2486:2491 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2494:2496 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2477:2477 ProgramEquivalence <> b var
R2484:2485 ProgramEquivalence <> c1 var
R2492:2493 ProgramEquivalence <> c2 var
R2439:2444 ProgramEquivalence <> bequiv def
R2448:2453 Imp <> BFalse constr
R2446:2446 ProgramEquivalence <> b var
R2624:2629 ProgramEquivalence <> bequiv def
R2736:2744 Imp <> E_IfFalse constr
R2736:2744 Imp <> E_IfFalse constr
R2758:2763 ProgramEquivalence <> bequiv def
prf 2909:2917 <> beval_neg
R2979:2982 Coq.Init.Logic <> :type_scope:x_'->'_x not
R2993:2995 Coq.Init.Logic <> :type_scope:x_'='_x not
R2983:2987 Imp <> beval def
R2992:2992 ProgramEquivalence <> b var
R2989:2990 ProgramEquivalence <> st var
R2996:2999 Coq.Init.Datatypes <> negb def
R3001:3002 ProgramEquivalence <> b' var
R2974:2976 Coq.Init.Logic <> :type_scope:x_'='_x not
R2957:2961 Imp <> beval def
R2967:2970 Imp <> BNot constr
R2972:2972 ProgramEquivalence <> b var
R2963:2964 ProgramEquivalence <> st var
R2977:2978 ProgramEquivalence <> b' var
R3070:3077 Coq.Bool.Bool <> negb_sym thm
R3070:3077 Coq.Bool.Bool <> negb_sym thm
R3070:3077 Coq.Bool.Bool <> negb_sym thm
prf 3112:3127 <> swap_if_branches
R3148:3153 ProgramEquivalence <> cequiv def
R3191:3194 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3201:3206 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3209:3214 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3217:3219 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3195:3198 Imp <> BNot constr
R3200:3200 ProgramEquivalence <> b var
R3207:3208 ProgramEquivalence <> e2 var
R3215:3216 ProgramEquivalence <> e1 var
R3160:3163 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3165:3170 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3173:3178 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3181:3183 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R3164:3164 ProgramEquivalence <> b var
R3171:3172 ProgramEquivalence <> e1 var
R3179:3180 ProgramEquivalence <> e2 var
R3300:3308 Imp <> E_IfFalse constr
R3300:3308 Imp <> E_IfFalse constr
R3365:3372 Imp <> E_IfTrue constr
R3365:3372 Imp <> E_IfTrue constr
R3484:3492 Imp <> E_IfFalse constr
R3484:3492 Imp <> E_IfFalse constr
R3505:3513 ProgramEquivalence <> beval_neg thm
R3505:3513 ProgramEquivalence <> beval_neg thm
R3589:3596 Imp <> E_IfTrue constr
R3589:3596 Imp <> E_IfTrue constr
R3609:3617 ProgramEquivalence <> beval_neg thm
R3609:3617 ProgramEquivalence <> beval_neg thm
prf 3768:3778 <> WHILE_false
R3814:3822 Coq.Init.Logic <> :type_scope:x_'->'_x not
R3823:3828 ProgramEquivalence <> cequiv def
R3863:3866 Imp <> ::'SKIP' not
R3838:3843 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3845:3848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3850:3853 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3844:3844 ProgramEquivalence <> b var
R3849:3849 ProgramEquivalence <> c var
R3799:3804 ProgramEquivalence <> bequiv def
R3808:3813 Imp <> BFalse constr
R3806:3806 ProgramEquivalence <> b var
R3982:3987 Imp <> E_Skip constr
R3982:3987 Imp <> E_Skip constr
R4099:4108 Imp <> E_WhileEnd constr
R4099:4108 Imp <> E_WhileEnd constr
prf 4357:4374 <> WHILE_true_nonterm
R4416:4424 Coq.Init.Logic <> :type_scope:x_'->'_x not
R4425:4427 Coq.Init.Logic <> :type_scope:'~'_x not
R4458:4459 Coq.Init.Logic <> :type_scope:'~'_x not
R4428:4428 Imp <> ::x_'/'_x_'\\'_x not
R4445:4448 Imp <> ::x_'/'_x_'\\'_x not
R4451:4454 Imp <> ::x_'/'_x_'\\'_x not
R4429:4434 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4436:4439 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4441:4444 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4435:4435 ProgramEquivalence <> b var
R4440:4440 ProgramEquivalence <> c var
R4449:4450 ProgramEquivalence <> st var
R4455:4457 ProgramEquivalence <> st' var
R4402:4407 ProgramEquivalence <> bequiv def
R4411:4415 Imp <> BTrue constr
R4409:4409 ProgramEquivalence <> b var
R4518:4523 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4525:4528 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4530:4533 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4518:4523 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4525:4528 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4530:4533 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4704:4709 ProgramEquivalence <> bequiv def
prf 4969:4986 <> ex_falso_quodlibet
R5012:5015 Coq.Init.Logic <> :type_scope:x_'->'_x not
R5016:5016 ProgramEquivalence <> P var
R5007:5011 Coq.Init.Logic <> False ind
prf 5061:5070 <> skip_state
R5126:5129 Coq.Init.Logic <> :type_scope:x_'->'_x not
R5132:5134 Coq.Init.Logic <> :type_scope:x_'='_x not
R5130:5131 ProgramEquivalence <> st var
R5135:5137 ProgramEquivalence <> st' var
R5114:5116 Imp <> ::x_'/'_x_'\\'_x not
R5119:5122 Imp <> ::x_'/'_x_'\\'_x not
R5110:5113 Imp <> ::'SKIP' not
R5117:5118 ProgramEquivalence <> st var
R5123:5125 ProgramEquivalence <> st' var
prf 5209:5218 <> WHILE_true
R5252:5261 Coq.Init.Logic <> :type_scope:x_'->'_x not
R5262:5267 ProgramEquivalence <> cequiv def
R5303:5308 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5314:5317 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5322:5325 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5309:5313 Imp <> BTrue constr
R5318:5321 Imp <> ::'SKIP' not
R5277:5282 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5284:5287 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5289:5292 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5283:5283 ProgramEquivalence <> b var
R5288:5288 ProgramEquivalence <> c var
R5238:5243 ProgramEquivalence <> bequiv def
R5247:5251 Imp <> BTrue constr
R5245:5245 ProgramEquivalence <> b var
R5406:5423 ProgramEquivalence <> WHILE_true_nonterm thm
R5406:5423 ProgramEquivalence <> WHILE_true_nonterm thm
R5473:5490 ProgramEquivalence <> ex_falso_quodlibet thm
R5473:5490 ProgramEquivalence <> ex_falso_quodlibet thm
R5559:5564 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5570:5573 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5578:5581 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5565:5569 Imp <> BTrue constr
R5574:5577 Imp <> ::'SKIP' not
R5559:5564 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5570:5573 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5578:5581 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R5565:5569 Imp <> BTrue constr
R5574:5577 Imp <> ::'SKIP' not
R5760:5769 ProgramEquivalence <> skip_state thm
R5760:5769 ProgramEquivalence <> skip_state thm
prf 5972:5985 <> loop_unrolling
R6002:6007 ProgramEquivalence <> cequiv def
R6037:6040 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6042:6048 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6069:6075 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6080:6082 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6041:6041 ProgramEquivalence <> b var
R6050:6052 Imp <> ::x_';;'_x not
R6049:6049 ProgramEquivalence <> c var
R6053:6058 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R6060:6063 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R6065:6068 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R6059:6059 ProgramEquivalence <> b var
R6064:6064 ProgramEquivalence <> c var
R6076:6079 Imp <> ::'SKIP' not
R6014:6019 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R6021:6024 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R6026:6029 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R6020:6020 ProgramEquivalence <> b var
R6025:6025 ProgramEquivalence <> c var
R6215:6223 Imp <> E_IfFalse constr
R6215:6223 Imp <> E_IfFalse constr
R6244:6249 Imp <> E_Skip constr
R6244:6249 Imp <> E_Skip constr
R6286:6293 Imp <> E_IfTrue constr
R6286:6293 Imp <> E_IfTrue constr
R6320:6324 Imp <> E_Seq constr
R6320:6324 Imp <> E_Seq constr
R6470:6480 Imp <> E_WhileLoop constr
R6470:6480 Imp <> E_WhileLoop constr
R6606:6615 Imp <> E_WhileEnd constr
R6606:6615 Imp <> E_WhileEnd constr
prf 6691:6699 <> seq_assoc
R6722:6727 ProgramEquivalence <> cequiv def
R6747:6749 Imp <> ::x_';;'_x not
R6756:6756 Imp <> ::x_';;'_x not
R6745:6746 ProgramEquivalence <> c1 var
R6752:6753 Imp <> ::x_';;'_x not
R6750:6751 ProgramEquivalence <> c2 var
R6754:6755 ProgramEquivalence <> c3 var
R6730:6730 Imp <> ::x_';;'_x not
R6737:6739 Imp <> ::x_';;'_x not
R6733:6734 Imp <> ::x_';;'_x not
R6731:6732 ProgramEquivalence <> c1 var
R6735:6736 ProgramEquivalence <> c2 var
R6740:6741 ProgramEquivalence <> c3 var
R6859:6863 Imp <> E_Seq constr
R6859:6863 Imp <> E_Seq constr
R6905:6909 Imp <> E_Seq constr
R6905:6909 Imp <> E_Seq constr
R7023:7027 Imp <> E_Seq constr
R7023:7027 Imp <> E_Seq constr
R7055:7059 Imp <> E_Seq constr
R7055:7059 Imp <> E_Seq constr
prf 7201:7219 <> identity_assignment
R7233:7234 Maps <> id ind
R7240:7245 ProgramEquivalence <> cequiv def
R7269:7272 Imp <> ::'SKIP' not
R7253:7257 Imp <> ::x_'::='_x not
R7252:7252 ProgramEquivalence <> X var
R7258:7260 Imp <> AId constr
R7262:7262 ProgramEquivalence <> X var
R7375:7382 Maps <> t_update def
R7375:7382 Maps <> t_update def
R7443:7467 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R7443:7467 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R7494:7506 Maps <> t_update_same thm
R7494:7506 Maps <> t_update_same thm
R7494:7506 Maps <> t_update_same thm
R7563:7570 Maps <> t_update def
R7579:7583 Imp <> aeval def
R7590:7592 Imp <> AId constr
R7563:7570 Maps <> t_update def
R7579:7583 Imp <> aeval def
R7590:7592 Imp <> AId constr
R7635:7639 Imp <> E_Ass constr
R7635:7639 Imp <> E_Ass constr
R7670:7694 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R7670:7694 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R7721:7733 Maps <> t_update_same thm
R7721:7733 Maps <> t_update_same thm
R7721:7733 Maps <> t_update_same thm
prf 7864:7876 <> assign_aequiv
R7910:7915 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7916:7921 ProgramEquivalence <> cequiv def
R7930:7934 Imp <> ::x_'::='_x not
R7929:7929 ProgramEquivalence <> X var
R7935:7935 ProgramEquivalence <> e var
R7923:7926 Imp <> ::'SKIP' not
R7894:7899 ProgramEquivalence <> aequiv def
R7909:7909 ProgramEquivalence <> e var
R7902:7904 Imp <> AId constr
R7906:7906 ProgramEquivalence <> X var
R7994:8003 ProgramEquivalence <> skip_state thm
R7994:8003 ProgramEquivalence <> skip_state thm
R8021:8026 ProgramEquivalence <> aequiv def
R8047:8050 Coq.Init.Logic <> :type_scope:x_'='_x not
R8073:8073 Coq.Init.Logic <> :type_scope:x_'='_x not
R8051:8058 Maps <> t_update def
R8047:8050 Coq.Init.Logic <> :type_scope:x_'='_x not
R8073:8073 Coq.Init.Logic <> :type_scope:x_'='_x not
R8051:8058 Maps <> t_update def
R8087:8111 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R8087:8111 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R8133:8145 Maps <> t_update_same thm
R8133:8145 Maps <> t_update_same thm
R8133:8145 Maps <> t_update_same thm
R8197:8201 Imp <> E_Ass constr
R8197:8201 Imp <> E_Ass constr
R8292:8294 Coq.Init.Logic <> :type_scope:x_'='_x not
R8295:8302 Maps <> t_update def
R8292:8294 Coq.Init.Logic <> :type_scope:x_'='_x not
R8295:8302 Maps <> t_update def
R8328:8352 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R8328:8352 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R8375:8387 Maps <> t_update_same thm
R8375:8387 Maps <> t_update_same thm
R8375:8387 Maps <> t_update_same thm
R8476:8481 ProgramEquivalence <> aequiv def
R8565:8570 Imp <> E_Skip constr
R8565:8570 Imp <> E_Skip constr
prf 8913:8923 <> refl_aequiv
R8939:8942 Imp <> aexp ind
R8946:8951 ProgramEquivalence <> aequiv def
R8955:8955 ProgramEquivalence <> a var
R8953:8953 ProgramEquivalence <> a var
prf 9006:9015 <> sym_aequiv
R9035:9038 Imp <> aexp ind
R9056:9059 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9060:9065 ProgramEquivalence <> aequiv def
R9070:9071 ProgramEquivalence <> a1 var
R9067:9068 ProgramEquivalence <> a2 var
R9044:9049 ProgramEquivalence <> aequiv def
R9054:9055 ProgramEquivalence <> a2 var
R9051:9052 ProgramEquivalence <> a1 var
prf 9142:9153 <> trans_aequiv
R9176:9179 Imp <> aexp ind
R9197:9200 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9213:9216 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9217:9222 ProgramEquivalence <> aequiv def
R9227:9228 ProgramEquivalence <> a3 var
R9224:9225 ProgramEquivalence <> a1 var
R9201:9206 ProgramEquivalence <> aequiv def
R9211:9212 ProgramEquivalence <> a3 var
R9208:9209 ProgramEquivalence <> a2 var
R9185:9190 ProgramEquivalence <> aequiv def
R9195:9196 ProgramEquivalence <> a2 var
R9192:9193 ProgramEquivalence <> a1 var
R9247:9252 ProgramEquivalence <> aequiv def
prf 9347:9357 <> refl_bequiv
R9373:9376 Imp <> bexp ind
R9380:9385 ProgramEquivalence <> bequiv def
R9389:9389 ProgramEquivalence <> b var
R9387:9387 ProgramEquivalence <> b var
R9408:9413 ProgramEquivalence <> bequiv def
prf 9455:9464 <> sym_bequiv
R9484:9487 Imp <> bexp ind
R9505:9508 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9509:9514 ProgramEquivalence <> bequiv def
R9519:9520 ProgramEquivalence <> b1 var
R9516:9517 ProgramEquivalence <> b2 var
R9493:9498 ProgramEquivalence <> bequiv def
R9503:9504 ProgramEquivalence <> b2 var
R9500:9501 ProgramEquivalence <> b1 var
R9539:9544 ProgramEquivalence <> bequiv def
prf 9606:9617 <> trans_bequiv
R9640:9643 Imp <> bexp ind
R9661:9664 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9677:9680 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9681:9686 ProgramEquivalence <> bequiv def
R9691:9692 ProgramEquivalence <> b3 var
R9688:9689 ProgramEquivalence <> b1 var
R9665:9670 ProgramEquivalence <> bequiv def
R9675:9676 ProgramEquivalence <> b3 var
R9672:9673 ProgramEquivalence <> b2 var
R9649:9654 ProgramEquivalence <> bequiv def
R9659:9660 ProgramEquivalence <> b2 var
R9656:9657 ProgramEquivalence <> b1 var
R9711:9716 ProgramEquivalence <> bequiv def
prf 9811:9821 <> refl_cequiv
R9837:9839 Imp <> com ind
R9843:9848 ProgramEquivalence <> cequiv def
R9852:9852 ProgramEquivalence <> c var
R9850:9850 ProgramEquivalence <> c var
R9871:9876 ProgramEquivalence <> cequiv def
R9902:9909 Coq.Init.Logic <> iff_refl thm
R9902:9909 Coq.Init.Logic <> iff_refl thm
prf 9925:9934 <> sym_cequiv
R9954:9956 Imp <> com ind
R9974:9977 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9978:9983 ProgramEquivalence <> cequiv def
R9988:9989 ProgramEquivalence <> c1 var
R9985:9986 ProgramEquivalence <> c2 var
R9962:9967 ProgramEquivalence <> cequiv def
R9972:9973 ProgramEquivalence <> c2 var
R9969:9970 ProgramEquivalence <> c1 var
R10008:10013 ProgramEquivalence <> cequiv def
R10063:10067 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10051:10053 Imp <> ::x_'/'_x_'\\'_x not
R10056:10059 Imp <> ::x_'/'_x_'\\'_x not
R10070:10072 Imp <> ::x_'/'_x_'\\'_x not
R10075:10078 Imp <> ::x_'/'_x_'\\'_x not
R10063:10067 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10051:10053 Imp <> ::x_'/'_x_'\\'_x not
R10056:10059 Imp <> ::x_'/'_x_'\\'_x not
R10070:10072 Imp <> ::x_'/'_x_'\\'_x not
R10075:10078 Imp <> ::x_'/'_x_'\\'_x not
R10139:10145 Coq.Init.Logic <> iff_sym thm
R10139:10145 Coq.Init.Logic <> iff_sym thm
prf 10172:10180 <> iff_trans
R10212:10212 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10222:10226 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10227:10227 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10237:10242 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10252:10252 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10245:10249 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10243:10244 ProgramEquivalence <> P1 var
R10250:10251 ProgramEquivalence <> P3 var
R10230:10234 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10228:10229 ProgramEquivalence <> P2 var
R10235:10236 ProgramEquivalence <> P3 var
R10215:10219 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R10213:10214 ProgramEquivalence <> P1 var
R10220:10221 ProgramEquivalence <> P2 var
prf 10418:10429 <> trans_cequiv
R10452:10454 Imp <> com ind
R10472:10475 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10488:10491 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10492:10497 ProgramEquivalence <> cequiv def
R10502:10503 ProgramEquivalence <> c3 var
R10499:10500 ProgramEquivalence <> c1 var
R10476:10481 ProgramEquivalence <> cequiv def
R10486:10487 ProgramEquivalence <> c3 var
R10483:10484 ProgramEquivalence <> c2 var
R10460:10465 ProgramEquivalence <> cequiv def
R10470:10471 ProgramEquivalence <> c2 var
R10467:10468 ProgramEquivalence <> c1 var
R10522:10527 ProgramEquivalence <> cequiv def
R10588:10590 Imp <> ::x_'/'_x_'\\'_x not
R10593:10596 Imp <> ::x_'/'_x_'\\'_x not
R10570:10578 ProgramEquivalence <> iff_trans thm
R10588:10590 Imp <> ::x_'/'_x_'\\'_x not
R10593:10596 Imp <> ::x_'/'_x_'\\'_x not
R10570:10578 ProgramEquivalence <> iff_trans thm
prf 11116:11130 <> CAss_congruence
R11166:11171 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11172:11177 ProgramEquivalence <> cequiv def
R11192:11195 Imp <> CAss constr
R11199:11201 ProgramEquivalence <> a1' var
R11197:11197 ProgramEquivalence <> i var
R11180:11183 Imp <> CAss constr
R11187:11188 ProgramEquivalence <> a1 var
R11185:11185 ProgramEquivalence <> i var
R11153:11158 ProgramEquivalence <> aequiv def
R11163:11165 ProgramEquivalence <> a1' var
R11160:11161 ProgramEquivalence <> a1 var
R11314:11318 Imp <> E_Ass constr
R11314:11318 Imp <> E_Ass constr
R11400:11404 Imp <> E_Ass constr
R11400:11404 Imp <> E_Ass constr
prf 11638:11654 <> CWhile_congruence
R11695:11698 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11712:11717 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11718:11723 ProgramEquivalence <> cequiv def
R11747:11752 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11756:11759 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11763:11766 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11753:11755 ProgramEquivalence <> b1' var
R11760:11762 ProgramEquivalence <> c1' var
R11726:11731 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11734:11737 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11740:11743 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11732:11733 ProgramEquivalence <> b1 var
R11738:11739 ProgramEquivalence <> c1 var
R11699:11704 ProgramEquivalence <> cequiv def
R11709:11711 ProgramEquivalence <> c1' var
R11706:11707 ProgramEquivalence <> c1 var
R11682:11687 ProgramEquivalence <> bequiv def
R11692:11694 ProgramEquivalence <> b1' var
R11689:11690 ProgramEquivalence <> b1 var
R11786:11791 ProgramEquivalence <> bequiv def
R11793:11798 ProgramEquivalence <> cequiv def
R11890:11895 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11898:11901 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11904:11907 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11890:11895 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11898:11901 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11904:11907 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12023:12032 Imp <> E_WhileEnd constr
R12023:12032 Imp <> E_WhileEnd constr
R12097:12107 Imp <> E_WhileLoop constr
R12097:12107 Imp <> E_WhileLoop constr
R12356:12361 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12365:12368 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12372:12375 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12356:12361 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12365:12368 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12372:12375 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12494:12503 Imp <> E_WhileEnd constr
R12494:12503 Imp <> E_WhileEnd constr
R12568:12578 Imp <> E_WhileLoop constr
R12568:12578 Imp <> E_WhileLoop constr
prf 13011:13025 <> CSeq_congruence
R13066:13069 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13083:13088 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13089:13094 ProgramEquivalence <> cequiv def
R13109:13110 Imp <> ::x_';;'_x not
R13106:13108 ProgramEquivalence <> c1' var
R13111:13113 ProgramEquivalence <> c2' var
R13099:13100 Imp <> ::x_';;'_x not
R13097:13098 ProgramEquivalence <> c1 var
R13101:13102 ProgramEquivalence <> c2 var
R13070:13075 ProgramEquivalence <> cequiv def
R13080:13082 ProgramEquivalence <> c2' var
R13077:13078 ProgramEquivalence <> c2 var
R13053:13058 ProgramEquivalence <> cequiv def
R13063:13065 ProgramEquivalence <> c1' var
R13060:13061 ProgramEquivalence <> c1 var
R13141:13146 ProgramEquivalence <> cequiv def
R13189:13194 ProgramEquivalence <> cequiv def
R13299:13303 Imp <> E_Seq constr
R13299:13303 Imp <> E_Seq constr
R13371:13376 ProgramEquivalence <> cequiv def
R13483:13487 Imp <> E_Seq constr
R13483:13487 Imp <> E_Seq constr
prf 13815:13828 <> CIf_congruence
R13872:13875 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13889:13892 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13906:13911 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13912:13917 ProgramEquivalence <> cequiv def
R13956:13959 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13962:13967 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13971:13976 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13980:13982 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13960:13961 ProgramEquivalence <> b' var
R13968:13970 ProgramEquivalence <> c1' var
R13977:13979 ProgramEquivalence <> c2' var
R13920:13923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13925:13930 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13933:13938 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13941:13943 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13924:13924 ProgramEquivalence <> b var
R13931:13932 ProgramEquivalence <> c1 var
R13939:13940 ProgramEquivalence <> c2 var
R13893:13898 ProgramEquivalence <> cequiv def
R13903:13905 ProgramEquivalence <> c2' var
R13900:13901 ProgramEquivalence <> c2 var
R13876:13881 ProgramEquivalence <> cequiv def
R13886:13888 ProgramEquivalence <> c1' var
R13883:13884 ProgramEquivalence <> c1 var
R13861:13866 ProgramEquivalence <> bequiv def
R13870:13871 ProgramEquivalence <> b' var
R13868:13868 ProgramEquivalence <> b var
R14012:14017 ProgramEquivalence <> cequiv def
R14061:14066 ProgramEquivalence <> cequiv def
R14083:14088 ProgramEquivalence <> bequiv def
R14151:14158 Imp <> E_IfTrue constr
R14151:14158 Imp <> E_IfTrue constr
R14257:14265 Imp <> E_IfFalse constr
R14257:14265 Imp <> E_IfFalse constr
R14353:14358 ProgramEquivalence <> cequiv def
R14375:14380 ProgramEquivalence <> bequiv def
R14459:14466 Imp <> E_IfTrue constr
R14459:14466 Imp <> E_IfTrue constr
R14565:14573 Imp <> E_IfFalse constr
R14565:14573 Imp <> E_IfFalse constr
